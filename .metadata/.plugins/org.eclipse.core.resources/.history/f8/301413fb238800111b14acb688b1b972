/*
 * widget_table.h
 *
 *  Created on: Apr 16, 2012
 *      Author: ACM
 */

#ifndef ___WIDGETTABLE___
#define ___WIDGETTABLE___

#include <stdio.h>
#include <math.h>
#include"widget.h"

#include "xbasic_types.h"
#include "xuartlite_l.h"
#include "xparameters.h"

#include"widget_table.h"

#define NWIDGETS 256

u8 wt_isFull();
s16 wt_free_loc();
s16 wt_insert(s16 loc);
void wt_remove(u8 loc);

struct widget_table{

	u8 size;			//number of widgets allocated
	u16 bitmap[NWIDGETS / 16];

	struct widget table[NWIDGETS];

	u8 (*isFull)();
	s16 (*free_loc) ();
	s16 (*insert) (s16 loc);
	void (*remove) (u8 loc);

}WidgetTable = {
	.size = 0,
	.isFull = wt_isFull,
	.free_loc = wt_free_loc,
	.insert = wt_insert,
	.remove = wt_remove
};

u8 wt_isFull(){
	return WidgetTable.size == (NWIDGETS - 1) ? 1 : 0;
}
//returns location and true if found,  if not returns proper parent location and false
//loc = 0 is a standard call
s16 wt_free_loc(){
	u32 i;
	u16 clusters = (NWIDGETS > 16)? ceil(NWIDGETS / 16.0) : 1;
	s16 free = -1;

	for(i = 0; i < clusters; ++i){
		if(WidgetTable.bitmap[i] == 0){
			return i * 16;
		}else if(WidgetTable.bitmap[i] != 65535){
			free = i;
		}
	}

	if(free != -1){
		for(i = 0; i < 16; ++i){

			if((WidgetTable.bitmap[free] >> (15 - i)) & 0x0001 == 0){
				return free*16 + i;
			}
		}
	}

	return -1;
}

s16 wt_insert(s16 loc){

	u8 collision = 0;
	WidgetTable.size++;


	return -1; //failed
}

void wt_remove(u8 loc){

	WidgetTable.size--;
}




#endif
