/*
 * widget_table.h
 *
 *  Created on: Apr 16, 2012
 *      Author: ACM
 */

#include"widget.h"

#include "xbasic_types.h"
#include "xuartlite_l.h"
#include "xparameters.h"

#include"widget_table.h"

u8 wt_isFull(){
	return size == (NWIDGETS - 1) ? true : false;
}
//returns location and true if found,  if not returns proper parent location and false
//loc = 0 is a standard call
s16 wt_free_loc(){
	u32 i;
	u16 clusters = NWIDGETS > 16? NWIDGETS / 16 : NWIDGETS;
	s16 free = -1;

	for(i = 0; i < clusters; ++i){
		if(clusters[i] == 0){
			return i * 16;
		}else if(clusters[i] != 65535){
			free = i;
		}
	}

	if(free != -1){
		for(i = 0; i < 16; ++i){

			if((clusters[free] >> i) & 0x0001 == 0){
				return free*16 + i;
			}
		}
	}

	return -1;
}

s16 wt_insert(Widget* wid, s16 loc){

	bool collision(false);
	do{
		collision = false;
		if(loc == -1){//no preference or location taken, scan and return first empty
			loc = search(0);
		}
		//if location is legal
		if(loc >= 0 && loc < NWIDGETS){
			if(table[loc].addr != 0){//user specified location was bad
				collision = true;
				loc = -1;
			}else{
				table[loc].addr = wid;
				++size;
			}
			return loc;
		}
	}while(collision);

	return -1; //failed
}

void wt_remove(u8 loc){

	size--;
}


struct widget_table{

	u8 size;			//number of widgets allocated
	u16 bitmap[NWIDGETS / 16];

	struct Widget table[NWIDGETS];

	u8 (*isFull)();
	s16 (*free_loc) (struct widget* addr);
	s16 (*insert) (struct widget* wid, s16 loc = -1);
	void (*remove) (u8 loc);

}WidgetTable = {
	.size = 0,
	.isFull = wt_isFull,
	.free_loc = wt_free_loc,
	.insert = wt_insert,
	.remove = wt_remove
};
